require('dotenv').config();
const bcrypt = require('bcryptjs');
const { User, Company } = require('./src/models');
const { sequelize } = require('./src/config/database');

async function testAuth() {
    try {
        console.log('üîç Testando autentica√ß√£o...\n');
        
        // 1. Verificar conex√£o com banco
        await sequelize.authenticate();
        console.log('‚úÖ Conectado ao banco de dados');
        
        // 2. Verificar se usu√°rio existe
        const email = 'admin@exemplo.com';
        let user = await User.findOne({ where: { email } });
        
        if (!user) {
            console.log('‚ö†Ô∏è Usu√°rio n√£o encontrado, criando...');
            
            // Criar usu√°rio teste
            user = await User.create({
                name: 'Admin Teste',
                email: email,
                password: '123456',
                role: 'client_admin',
                status: 'active'
            });
            
            console.log('‚úÖ Usu√°rio criado:', {
                id: user.id,
                name: user.name,
                email: user.email,
                role: user.role
            });
        } else {
            console.log('‚úÖ Usu√°rio encontrado:', {
                id: user.id,
                name: user.name,
                email: user.email,
                role: user.role
            });
        }
        
        // 3. Testar hash da senha
        const plainPassword = '123456';
        console.log('\nüîê Testando senha...');
        console.log('Senha em texto:', plainPassword);
        console.log('Hash no banco:', user.password);
        
        // 4. Testar verifica√ß√£o de senha
        const isValid = await user.checkPassword(plainPassword);
        console.log('Senha v√°lida:', isValid ? '‚úÖ SIM' : '‚ùå N√ÉO');
        
        // 5. Testar hash manual
        const manualHash = await bcrypt.hash(plainPassword, 12);
        const manualCheck = await bcrypt.compare(plainPassword, user.password);
        console.log('Verifica√ß√£o manual:', manualCheck ? '‚úÖ SIM' : '‚ùå N√ÉO');
        
        // 6. Atualizar senha se necess√°rio
        if (!isValid) {
            console.log('\nüîß Senha inv√°lida, atualizando...');
            await user.update({ password: plainPassword });
            
            // Verificar novamente
            const updatedUser = await User.findByPk(user.id);
            const newCheck = await updatedUser.checkPassword(plainPassword);
            console.log('Nova verifica√ß√£o:', newCheck ? '‚úÖ SIM' : '‚ùå N√ÉO');
        }
        
        console.log('\nüéâ Teste conclu√≠do!');
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
    } finally {
        await sequelize.close();
    }
}

// Executar teste
testAuth();